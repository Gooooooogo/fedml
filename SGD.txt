{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def state_dict(self):\n",
    "        r\"\"\"Returns the state of the optimizer as a :class:`dict`.\n",
    "        It contains two entries:\n",
    "        * state - a dict holding current optimization state. Its content\n",
    "            differs between optimizer classes.\n",
    "        * param_groups - a dict containing all parameter groups\n",
    "        \"\"\"\n",
    "        # Save ids instead of Tensors\n",
    "        def pack_group(group):\n",
    "            packed = {k: v for k, v in group.items() if k != 'params'}\n",
    "            packed['params'] = [id(p) for p in group['params']]\n",
    "            return packed\n",
    "        # self.param_groups中的每一项(字典)重新以字典形式返回,并封装在一个列表中,即param_groups的数据组织形式与self.param_groups完全相同,区别是'params'这一项数据不再是Tensor,而是Tensor的地址。即原来保存的是变量,现在保存的变量对应的对象的地址。\n",
    "        param_groups = [pack_group(g) for g in self.param_groups]\n",
    "        # 将state中的所有Tensor替换为相应的对象的地址\n",
    "        packed_state = {(id(k) if isinstance(k, torch.Tensor) else k): v\n",
    "                        for k, v in self.state.items()}\n",
    "        # 以字典的形式返回\n",
    "        return {\n",
    "            'state': packed_state,\n",
    "            'param_groups': param_groups,\n",
    "        }\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "class net(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(net, self).__init__()\n",
    "\n",
    "        self.conv = nn.Sequential(\n",
    "            nn.Conv2d(1, 1, 1, stride=1, padding=0, bias=False),\n",
    "            nn.BatchNorm2d(1),\n",
    "            nn.ReLU(inplace=True),\n",
    "        )\n",
    "        self.fc = nn.Linear(4, 2)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.conv(x)\n",
    "        x = x.view(-1, 4)\n",
    "        x = self.fc(x)\n",
    "        return x\n",
    "\n",
    "model = net()\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = torch.optim.SGD([{'params':model.conv.parameters(), 'lr':0.01},\n",
    "                            {'params':model.fc.parameters(), 'lr':0.02}],\n",
    "                            momentum=0.9,\n",
    "                            weight_decay=1e-5)\n",
    "\n",
    "x = torch.rand(1, 1, 2, 2)\n",
    "y = torch.tensor([1])\n",
    "\n",
    "optimizer.zero_grad()\n",
    "output = model(x)\n",
    "loss = criterion(output, y)\n",
    "loss.backward()\n",
    "optimizer.step()\n",
    "\n",
    "print(optimizer.state_dict())\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.17"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
